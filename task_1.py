"""
Windows 10 64-bit
Intel Core i7-8750H CPU@2,20GHz, 8,0GB RAM
Python 3.9.150.0

Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486, надо вывести 6843.
"""
import sys

number = input("Введите число:")
b = ''
for i in number:
    b = i + b
print(b)

print(sys.getsizeof(b))
print(sys.getsizeof(i))
"""
Введите число:7412589630 
0369852147
59
Введите число:9632145870
0785412369
59
50

Введите число:741025896
698520147
58
Введите число:741025896
698520147
58
50

Введите число:96302587
78520369
57
Введите число:74125896
69852147
57
50


Зависимость траты памяти, напрямую связана с размером числа, хотя при этом на переменную цикла
расход постоянен. Сумарный расход памяти при числе в десять знаков = 109 байт
"""


def rec(a, i):
    return i if (a == 0) else rec(a // 10, i * 10 + a % 10)


print(rec(int(input("Введите любое целое число : ")), 0))

print(sys.getsizeof(rec))

"""
Введите любое целое число : 78
87
136

Введите любое целое число : 7410258963
3698520147
136

Введите любое целое число : 7410258963014785236996321047
7401236996325874103698520147
136

При использовании рекурсии, мы видим постоянный расход памяти равный в 136 байт, не зависимо от размера числа.
"""

# при использовании свойств строк
n = input("Введите любое целое и многозначное число: ")
rev = n[::-1]
print("Число с цифрами в обратном порядке:", rev)

#print("Число с цифрами в обратном порядке:", input()[::-1])

print(sys.getsizeof(n))
print(sys.getsizeof(rev))

"""
затраты памяти на реверс 2х значного числа 51 байт

Введите любое целое и многозначное число: 1478523690
Число с цифрами в обратном порядке: 0963258741
59
59
Затраты памяти 10и значное 59 байт т.е. увеличивается с увиличением размера числа, аналогично первому варианту.

"""



# при использовании цикла while

n_1 = int(input("Введите любое целое и многозначное число: "))
m = 0
while n_1 > 0:
    m = m * 10 + n_1 % 10
    n_1 = n_1 // 10
print(m)

print(sys.getsizeof(n_1))
print(sys.getsizeof(m))

"""
Введите любое целое и многозначное число: 89
98
24
28

Введите любое целое и многозначное число: 1478523690
963258741
24
28

Введите любое целое и многозначное число: 14785236907410258963
36985201470963258741
24
36

478965412320123654789645210321
24
40

При использовании цикла while  на начальном этапе расход памяти, мал 52 байта, при увеличении числа 
на каждые десять знаков, задействутся память на 8 бит больше. После 20 знаков прирост расхода памяти происходит 
лиш после использования 10 знаков тоесть при использовании 30и значного числа задействуется 36 + 4 , 
дополнительно 4 байта.
(расматривал изменяющуюся часть сумарного расхода памяти)

ВЫВОД:
Самый оптимальный вариант решения на не больших объемах чисел, цикл WHILE.
При обработке различных объемов в том числе и больших объемов данных, использование рекурсивного способа
решения задач, более оптимально, поскольку используемая память постоянна. Всегда можно подсчитать требуемый объем
и при этом знать, что для данного способа увеличения расхода памяти не произойдет. 

PS
К сожалению на более сложные варианты не хватило времени.
Про пропущунные уроки сожалею, но уговор дороже денег.
Я скину позже в гит, если вдруг будет желпние, проверте, пожалуйста.
Не ради оценки для GB, так ради моих знаний. Буду признателен.
"""